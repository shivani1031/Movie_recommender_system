# -*- coding: utf-8 -*-
"""Movie_recommender_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1clsi9EdxkaDrwdYk2Qg6AYMp2ptsw5Z_
"""



!cd /content/drive/MyDrive/movie_dataset

!unzip /content/drive/MyDrive/movie_data.zip

import numpy as np # linear algebra
import pandas as pd # data processing,

movies_df = pd.read_csv('/content/movie_data/tmdb_5000_movies.csv')

movies_df.head()

movies_df.shape

credits_df = pd.read_csv('/content/movie_data/tmdb_5000_credits.csv')

credits_df.head()

movies_df = movies_df.merge(credits_df,on='title')

movies_df.head()

movies_df = movies_df[['movie_id','title','overview','genres','keywords','cast','crew']]  #need to keep the important one's

movies_df['genres'].head()

movies_df.head()

import ast

movies_df['genres'].head()

def convert(text):
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name'])
    return L

movies_df.dropna(inplace=True)

movies_df['genres'] = movies_df['genres'].apply(convert)

movies_df.head()

movies_df['keywords'] = movies_df['keywords'].apply(convert)
movies_df.head()

import ast
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')
def convert3(text):
    L = []
    counter = 0
    for i in ast.literal_eval(text):
        if counter < 3:
            L.append(i['name'])
        counter+=1
    return L

movies_df['cast'] = movies_df['cast'].apply(convert)
movies_df.head()

movies_df['cast'] = movies_df['cast'].apply(lambda x:x[0:3])

movies_df.drop(columns=['crew'], inplace=True)

movies_df.head()

# def fetch_director(text):
#     L = []
#     for i in ast.literal_eval(text):
#         if i['job'] == 'Director':
#             L.append(i['name'])
#     return L

# movies_df['crew'] = movies_df['crew'].apply(fetch_director)

def collapse(L):
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

movies_df['cast'] = movies_df['cast'].apply(collapse)

movies_df['genres'] = movies_df['genres'].apply(collapse)
movies_df['keywords'] = movies_df['keywords'].apply(collapse)

movies_df.head()

movies_df['overview'] = movies_df['overview'].apply(lambda x:x.split())

movies_df['tags'] = movies_df['overview'] + movies_df['genres'] + movies_df['keywords'] + movies_df['cast']
new = movies_df.drop(columns=['overview','genres','keywords','cast'])
#new.head()

new['tags'] = new['tags'].apply(lambda x: " ".join(x))
new.head()

"""#Vectorization"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vector = cv.fit_transform(new['tags']).toarray()
vector.shape

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vector)
similarity

new[new['title'] == 'The Lego Movie'].index[0]


def recommend(movie):
    index = new[new['title'] == movie].index[0]
    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:6]:
        print(new.iloc[i[0]].title)

recommend('Spectre')

